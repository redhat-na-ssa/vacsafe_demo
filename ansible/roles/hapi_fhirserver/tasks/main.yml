---

#######    Fhir Server Database    ##################

- name: "create {{ postgresql_service_account }} service account in {{ namespace }}"
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ postgresql_service_account }}"
    namespace: "{{ namespace }}"

- name: create work directory
  file:
    path: "{{ work_dir }}/{{ postgresql_init_configmap }}"
    state: directory

- name: copy init files to work directory
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir }}/{{ postgresql_init_configmap }}/"
  with_fileglob:
    - "{{ resources_dir }}/sql/*.sh"

# Commented out because FHIR server auto-generates the database schema (if it doesn't already exist)
#- name: download sql scripts from remote repository
#  get_url:
#    url: "{{ item }}"
#    dest: "{{ work_dir }}/{{ postgresql_init_configmap }}/"
#  with_items:
#     - "{{ psql_init_scripts }}"

- name: create {{ postgresql_init_configmap }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ postgresql_init_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/{{ postgresql_init_configmap }}"

- name: create {{ hapi_psql_debezium_conf_name }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ hapi_psql_debezium_conf_name }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ resources_dir }}/sql/{{ hapi_psql_debezium_conf_file }}"

- name: copy postgresql template
  template:
    src: "{{ resources_dir }}/postgresql.yml"
    dest: "{{ work_dir }}/postgresql.yml"

- name: postgresql secret
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ psql_credentials_secret }}"
    type: generic
    from_literal:
      database-user: "{{ psql_user_name }}"
      database-password: "{{ psql_user_passwd }}"
      database-name: "{{ psql_db_name }}"

- name: "check if {{ psql_app_name }} is deployed"
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ psql_app_name }}"
    namespace: "{{ namespace }}"
    kind: dc
  register: result

- name: "deploy {{ psql_app_name }}"
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/postgresql.yml"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""

- name: "wait until {{ psql_app_name }} database is up and running"
  shell: "{{ openshift_cli }} get dc {{ psql_app_name }} -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false
###########################################################


########    FHIR Server    #############
- name: create {{ service_account }} service account for {{ application_name }} application
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ service_account }}"
    namespace: "{{ namespace }}"

- name: give cluster admin privileges to {{ service_account }} service account
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    resource_kind: role
    resource_name: admin
    user: "system:serviceaccount:{{ namespace }}:{{ service_account }}"
    namespace: "{{ namespace }}"
    rolebinding_name: "{{ service_account }}-admin"

- name: copy {{ application_properties }} template
  template:
    src: "{{ resources_dir }}/{{ application_properties }}"
    dest: "{{ work_dir }}/{{ application_properties }}"

- name: create {{ application_configmap }} application configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ application_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/{{ application_properties }}"

- import_tasks: deploy_from_source.yml
  when: deploy_from is defined and deploy_from == "source"

- import_tasks: deploy_from_image.yml
  when: deploy_from is defined and deploy_from == "image"

- set_fact:
    route_hostname: "{{ application_name }}-{{ namespace }}.{{ ocp_domain_host.stdout }}"
- name: "copy route template"
  template:
    src: "{{ resources_dir }}/route.yml"
    dest: "{{ work_dir }}/route.yml"
- name: "deploy {{ application_name }} route {{ route_hostname }}"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ application_name }}"
    namespace: "{{ namespace }}"
    kind: route
    files:
      - "{{ work_dir }}/route.yml"

###########################################################


########    HAPI FHIR Postgresql Debezium    #############
- import_tasks: deploy_debezium_connector.yml
###########################################################
